require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dfa_1 = require("../models/dfa");
var dfa = new dfa_1.Dfa();
function createState() {
    var svg = document.getElementById('grid');
    var stateSvg = document.createElementNS("http://www.w3.org/2000/svg", 'circle');
    stateSvg.setAttribute('r', '40');
    stateSvg.setAttribute('cx', '50');
    stateSvg.setAttribute('cy', '50');
    stateSvg.style.stroke = 'black';
    stateSvg.style.strokeWidth = '3';
    stateSvg.style.fill = 'white';
}
function loadDfa() {
    var input = document.getElementById('dfaFile');
    if (input.files.length == 1) {
        var reader_1 = new FileReader();
        reader_1.onload = function (e) {
            dfa.deserialize(reader_1.result);
            updateUI();
        };
        reader_1.readAsText(input.files[0]);
    }
}
function updateUI() {
    updateAlphabet();
    updateNumStates();
    updateStartState();
    updateAcceptStates();
    updateTransitions();
}
function updateAlphabet() {
    var alphabetInput = document.getElementById('alphabetInput');
    alphabetInput.value = dfa.alphabet.join(',');
}
function updateNumStates() {
    var numStatesInput = document.getElementById('numStatesInput');
    numStatesInput.value = dfa.numStates.toString();
}
function updateStartState() {
    var startStateInput = document.getElementById('startStateInput');
    startStateInput.value = dfa.startState.toString();
}
function updateAcceptStates() {
    var acceptingStatesInput = document.getElementById('acceptingStatesInput');
    acceptingStatesInput.value = dfa.acceptingStates.join(',');
}
function updateTransitions() {
    clearTransitionsList();
    for (var fromState = 0; fromState < dfa.numStates; fromState++) {
        for (var _i = 0, _a = dfa.alphabet; _i < _a.length; _i++) {
            var letter = _a[_i];
            addTransition(fromState, letter, dfa.transitions[fromState][letter]);
        }
    }
}
function clearTransitionsList() {
    var transitionsList = document.getElementById("transitionsList");
    while (transitionsList.firstChild) {
        transitionsList.removeChild(transitionsList.firstChild);
    }
}
function addTransition(fromState, letter, toState) {
    var transitionList = document.getElementById('transitionsList');
    var text = fromState.toString() + ' + ' + letter + ' &rarr;';
    var listElement = document.createElement('li');
    listElement.classList.add('list-group-item');
    var listItemString = '<div class="input-group">\
            <div class="input-group-prepend">\
                <span class="input-group-text">' + text + '</span>\
            </div>\
            <input type="number" class="form-control" placeholder="Q" value="' + toState + '">\
        </div>';
    listElement.innerHTML = listItemString;
    transitionList.appendChild(listElement);
}
function addGridEvents() {
    document.getElementById('grid').addEventListener('click', function () {
        createState();
    });
}
$(document).ready(function () {
    addGridEvents();
    document.getElementById('loadBtn').addEventListener('click', function () {
        loadDfa();
    });
});

},{"../models/dfa":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var Dfa = (function () {
    function Dfa() {
    }
    Dfa.prototype.acceptsString = function (inputString) {
        var execution = new DfaExecution(this, inputString);
        execution.finish();
        return this.acceptingStates.includes(execution.currentState);
    };
    Dfa.prototype.deserialize = function (contents) {
        var lines = contents.split('\n');
        this.alphabet = lines[0].split(',');
        this.numStates = parseInt(lines[1]);
        this.startState = parseInt(lines[2]);
        this.acceptingStates = lines[3].split(',').map(function (i) {
            return parseInt(i);
        });
        this.transitions = {};
        for (var state = 0; state < this.numStates; state++) {
            this.transitions[state] = {};
            for (var _i = 0, _a = this.alphabet; _i < _a.length; _i++) {
                var char = _a[_i];
                this.transitions[state][char] = -1;
            }
        }
        var numTransitions = this.alphabet.length * this.numStates;
        for (var i = 4; i < 4 + numTransitions; i++) {
            var line = lines[i].split(',');
            this.transitions[parseInt(line[0])][line[1]] = parseInt(line[2]);
        }
    };
    Dfa.prototype.serialize = function () {
        var contents = [];
        ;
        contents.push(this.alphabet.join(','));
        contents.push(this.numStates.toString());
        contents.push(this.startState.toString());
        contents.push(this.acceptingStates.join(','));
        for (var state = 0; state <= this.numStates; state++) {
            for (var _i = 0, _a = this.alphabet; _i < _a.length; _i++) {
                var letter = _a[_i];
                contents.push(state.toString() + ',' + letter + ',' +
                    this.transitions[state][letter]);
            }
        }
        return contents.join('\n');
    };
    Dfa.prototype.readFromFile = function (filepath) {
        var contents = fs_1.readFileSync(filepath, "utf8");
        this.deserialize(contents);
    };
    Dfa.prototype.writeToFile = function (filepath) {
        var contents = this.serialize();
        fs_1.writeFileSync(filepath, contents);
    };
    return Dfa;
}());
exports.Dfa = Dfa;
var DfaExecution = (function () {
    function DfaExecution(dfa, inputString) {
        this.dfa = dfa;
        this.currentState = dfa.startState;
        this.inputString = inputString;
        this.currentCharIndex = 0;
    }
    DfaExecution.prototype.finish = function () {
        while (this.currentCharIndex < this.inputString.length) {
            this.step();
        }
    };
    DfaExecution.prototype.step = function () {
        if (this.currentCharIndex >= this.inputString.length) {
            return;
        }
        var currentChar = this.inputString[this.currentCharIndex++];
        var nextState = this.dfa.transitions[this.currentState][currentChar];
        this.currentState = nextState;
    };
    return DfaExecution;
}());
exports.DfaExecution = DfaExecution;

},{"fs":1}],1:[function(require,module,exports){

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
