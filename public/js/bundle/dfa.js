require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dfa_1 = require("../models/dfa");
var StateNode = (function () {
    function StateNode(stateNum) {
    }
    return StateNode;
}());
var dfa = new dfa_1.Dfa();
var states = [];
function createDefaultDfa() {
    var alphabet = ['0', '1'];
    var numStates = 3;
    var startState = 0;
    var acceptingStates = [2];
    var transitions = {
        0: {
            '0': 1,
            '1': 0
        },
        1: {
            '0': 2,
            '1': 0
        },
        2: {
            '0': 2,
            '1': 0
        }
    };
    return new dfa_1.Dfa({
        alphabet: alphabet,
        numStates: numStates,
        startState: startState,
        acceptingStates: acceptingStates,
        transitions: transitions
    });
}
function saveDfaToFile() {
}
function loadDfaFromFile() {
    var input = document.getElementById('dfaFile');
    if (input.files.length == 1) {
        var reader_1 = new FileReader();
        reader_1.onload = function (e) {
            dfa.deserialize(reader_1.result);
            loadDfa(dfa);
        };
        reader_1.readAsText(input.files[0]);
    }
}
function loadDfa(newDfa) {
    clearAll();
    dfa = newDfa;
    updatePanel();
    updateSVG();
}
function updatePanel() {
    updateAlphabet();
    updateNumStates();
    updateStartState();
    updateAcceptStates();
    updateTransitions();
}
function updateSVG() {
    createStates();
}
function updateAlphabet() {
    var alphabetInput = document.getElementById('alphabetInput');
    alphabetInput.value = dfa.alphabet.join(',');
}
function updateNumStates() {
    var numStatesInput = document.getElementById('numStatesInput');
    numStatesInput.value = dfa.numStates.toString();
}
function updateStartState() {
    var startStateInput = document.getElementById('startStateInput');
    startStateInput.value = dfa.startState.toString();
}
function updateAcceptStates() {
    var acceptingStatesInput = document.getElementById('acceptingStatesInput');
    acceptingStatesInput.value = dfa.acceptingStates.join(',');
}
function updateTransitions() {
    clearTransitionsList();
    for (var fromState = 0; fromState < dfa.numStates; fromState++) {
        for (var _i = 0, _a = dfa.alphabet; _i < _a.length; _i++) {
            var letter = _a[_i];
            addTransition(fromState, letter, dfa.transitions[fromState][letter]);
        }
    }
}
function clearTransitionsList() {
    var transitionsList = document.getElementById("transitionsList");
    while (transitionsList.firstChild) {
        transitionsList.removeChild(transitionsList.firstChild);
    }
}
function addTransition(fromState, letter, toState) {
    var transitionList = document.getElementById('transitionsList');
    var text = fromState.toString() + ' + ' + letter + ' &rarr;';
    var listElement = document.createElement('li');
    listElement.classList.add('list-group-item');
    var listItemString = '<div class="input-group">\
            <div class="input-group-prepend">\
                <span class="input-group-text">' + text + '</span>\
            </div>\
            <input type="number" class="form-control" placeholder="Q" value="' + toState + '">\
        </div>';
    listElement.innerHTML = listItemString;
    transitionList.appendChild(listElement);
}
function createState(event) {
    var svg = document.getElementById('dfaSvg');
    var domPoint = mouseEventToSVGCoord(svg, event);
    createStateAtPoint(domPoint.x, domPoint.y);
}
function addDrag(state, grid) {
    var selectedElement = null;
    var offset;
    state.addEventListener('mousedown', startDrag);
    document.addEventListener('mousemove', drag);
    state.addEventListener('mouseup', endDrag);
    function startDrag(event) {
        selectedElement = state;
        offset = mouseEventToSVGCoord(grid, event);
        offset.x -= parseFloat(selectedElement.getAttributeNS(null, "cx"));
        offset.y -= parseFloat(selectedElement.getAttributeNS(null, 'cy'));
    }
    function drag(event) {
        if (selectedElement) {
            event.preventDefault();
            var domPoint = mouseEventToSVGCoord(grid, event);
            state.setAttribute('cx', (domPoint.x - offset.x).toString());
            state.setAttribute('cy', (domPoint.y - offset.y).toString());
        }
    }
    function endDrag(event) {
        selectedElement = null;
    }
}
function mouseEventToSVGCoord(svg, mouseEvent) {
    return toSvgCoord(svg, mouseEvent.x, mouseEvent.y);
}
function toSvgCoord(svg, x, y) {
    var point = svg.createSVGPoint();
    point.x = x;
    point.y = y;
    return point.matrixTransform(svg.getScreenCTM().inverse());
}
function clearAll() {
    clearPanel();
    clearSvg();
}
function clearPanel() {
    var alphabetInput = document.getElementById('alphabetInput');
    alphabetInput.value = '';
    var numStatesInput = document.getElementById('numStatesInput');
    numStatesInput.value = '';
    var startStateInput = document.getElementById('startStateInput');
    startStateInput.value = '';
    var acceptingStatesInput = document.getElementById('acceptingStatesInput');
    acceptingStatesInput.value = '';
}
function clearSvg() {
    clearStates();
    clearTransitions();
}
function clearStates() {
    var elements = document.getElementsByClassName('state');
    for (var i = elements.length - 1; i >= 0; i--) {
        elements[i].remove();
    }
}
function clearTransitions() {
    var transitionList = document.getElementById('transitionsList');
    var childNodes = transitionList.childNodes;
    for (var i = childNodes.length - 1; i >= 0; i--) {
        var child = childNodes[i];
        child.remove();
    }
}
function createStateAtPoint(svgX, svgY) {
    var svg = document.getElementById('dfaSvg');
    var circle = document.createElementNS("http://www.w3.org/2000/svg", 'circle');
    circle.setAttribute('draggable', 'true');
    circle.setAttribute('r', '40');
    circle.setAttribute('cx', svgX.toString());
    circle.setAttribute('cy', svgY.toString());
    circle.style.stroke = 'black';
    circle.style.strokeWidth = '3';
    circle.style.fill = 'white';
    circle.style.position = 'absolute';
    circle.classList.add('state');
    circle.onmouseenter = function (event) {
        circle.style.fill = '#BBBBBB';
    };
    circle.onmouseleave = function (event) {
        circle.style.fill = '#FFFFFF';
    };
    addDrag(circle, svg);
    svg.appendChild(circle);
}
var stateSpacing = 200;
function createStates() {
    var svg = document.getElementById('dfaSvg');
    var middle = dfa.numStates / 2 - .5;
    var svgWidth = svg.getBBox().width;
    var svgHeight = svg.getBBox().height;
    for (var i = 0; i < dfa.numStates; i++) {
        var startX = svgWidth / 2 + (i - middle) * stateSpacing;
        var startY = svgHeight / 2 - middle * stateSpacing;
        createStateAtPoint(startX, startY);
    }
}
function addGridEvents() {
    document.getElementById('grid').addEventListener('click', function (event) {
        createState(event);
    });
}
function loadDefaultDfa() {
    loadDfa(createDefaultDfa());
}
function testString() {
    var inputElement = document.getElementById('testStringInput');
    var inputString = inputElement.value;
    var result = dfa.acceptsString(inputString);
    result ? resultSuccess(inputString) : resultFail(inputString);
}
function clearInput() {
    resultReset();
    var inputElement = document.getElementById('testStringInput');
    inputElement.value = '';
}
function resultSuccess(inputString) {
    var resultElement = document.getElementById('resultBar');
    resultElement.style.background = 'green';
    var resultText = document.getElementById('resultText');
    resultText.innerText = '"' + inputString + '" yields SUCCESS';
}
function resultFail(inputString) {
    var resultElement = document.getElementById('resultBar');
    resultElement.style.background = 'red';
    var resultText = document.getElementById('resultText');
    resultText.innerText = '"' + inputString + '" yields FAIL';
}
function resultReset() {
    var resultElement = document.getElementById('resultBar');
    resultElement.style.background = '#444444';
    var resultText = document.getElementById('resultText');
    resultText.innerText = 'Result';
}
$(document).ready(function () {
    document.getElementById('loadBtn').addEventListener('click', function () {
        loadDfaFromFile();
    });
    document.getElementById('loadExampleBtn').addEventListener('click', function () {
        loadDefaultDfa();
    });
    document.getElementById('testBtn').addEventListener('click', function () {
        testString();
    });
    document.getElementById('clearBtn').addEventListener('click', function () {
        clearAll();
    });
    document.getElementById('clearInputBtn').addEventListener('click', function () {
        clearInput();
    });
    document.getElementById('testStringInput').addEventListener('change', function () {
        resultReset();
    });
    loadDefaultDfa();
});
},{"../models/dfa":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var Dfa = (function () {
    function Dfa(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.alphabet, alphabet = _c === void 0 ? [] : _c, _d = _b.numStates, numStates = _d === void 0 ? 0 : _d, _e = _b.startState, startState = _e === void 0 ? 0 : _e, _f = _b.acceptingStates, acceptingStates = _f === void 0 ? [] : _f, _g = _b.transitions, transitions = _g === void 0 ? {} : _g;
        this.alphabet = alphabet;
        this.numStates = numStates;
        this.startState = startState;
        this.acceptingStates = acceptingStates;
        this.transitions = transitions;
    }
    Dfa.prototype.acceptsString = function (inputString) {
        var execution = new DfaExecution(this, inputString);
        execution.finish();
        return this.acceptingStates.includes(execution.currentState);
    };
    Dfa.prototype.deserialize = function (contents) {
        var lines = contents.split('\n');
        this.alphabet = lines[0].split(',');
        this.numStates = parseInt(lines[1]);
        this.startState = parseInt(lines[2]);
        this.acceptingStates = lines[3].split(',').map(function (i) {
            return parseInt(i);
        });
        this.transitions = {};
        for (var state = 0; state < this.numStates; state++) {
            this.transitions[state] = {};
            for (var _i = 0, _a = this.alphabet; _i < _a.length; _i++) {
                var char = _a[_i];
                this.transitions[state][char] = -1;
            }
        }
        var numTransitions = this.alphabet.length * this.numStates;
        for (var i = 4; i < 4 + numTransitions; i++) {
            var line = lines[i].split(',');
            this.transitions[parseInt(line[0])][line[1]] = parseInt(line[2]);
        }
    };
    Dfa.prototype.serialize = function () {
        var contents = [];
        ;
        contents.push(this.alphabet.join(','));
        contents.push(this.numStates.toString());
        contents.push(this.startState.toString());
        contents.push(this.acceptingStates.join(','));
        for (var state = 0; state <= this.numStates; state++) {
            for (var _i = 0, _a = this.alphabet; _i < _a.length; _i++) {
                var letter = _a[_i];
                contents.push(state.toString() + ',' + letter + ',' +
                    this.transitions[state][letter]);
            }
        }
        return contents.join('\n');
    };
    Dfa.prototype.readFromFile = function (filepath) {
        var contents = fs_1.readFileSync(filepath, "utf8");
        this.deserialize(contents);
    };
    Dfa.prototype.writeToFile = function (filepath) {
        var contents = this.serialize();
        fs_1.writeFileSync(filepath, contents);
    };
    return Dfa;
}());
exports.Dfa = Dfa;
var DfaExecution = (function () {
    function DfaExecution(dfa, inputString) {
        this.dfa = dfa;
        this.currentState = dfa.startState;
        this.inputString = inputString;
        this.currentCharIndex = 0;
    }
    DfaExecution.prototype.finish = function () {
        while (this.currentCharIndex < this.inputString.length) {
            this.step();
        }
    };
    DfaExecution.prototype.step = function () {
        if (this.currentCharIndex >= this.inputString.length) {
            return;
        }
        var currentChar = this.inputString[this.currentCharIndex++];
        var nextState = this.dfa.transitions[this.currentState][currentChar];
        this.currentState = nextState;
    };
    return DfaExecution;
}());
exports.DfaExecution = DfaExecution;
},{"fs":1}],1:[function(require,module,exports){

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
